name: Validate

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-nginx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Nginx with Docker
        run: |
          docker run -d --name test-nginx -p 8080:80 -v ${{ github.workspace }}/index.html:/usr/share/nginx/html/index.html:ro nginx:latest

      - name: Wait for Nginx to start
        run: sleep 5

      - name: Test Hello World Page
        run: |
          curl -s -o response.html http://localhost:8080/index.html
          grep "Hello World" response.html

      - name: Stop Nginx container
        run: docker stop test-nginx

  test-flask:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Flask Docker image
        run: docker build -t flask-app ./flask

      - name: Run Flask container
        run: docker run -d --name flask-test -p 5000:5000 flask-app

      - name: Wait for Flask to start
        run: sleep 5

      - name: Run Flask tests
        run: docker exec flask-test pytest

      - name: Stop Flask container
        run: docker stop flask-test

  test-mysql:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: mydb
          MYSQL_USER: user
          MYSQL_PASSWORD: userpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -uuser -puserpassword --silent; then
              break
            fi
            sleep 2
          done

      - name: Run database tests
        run: |
          # Example: run your integration tests here
          pytest

  lint-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Dockerfile
        uses: luke142367/Docker-Lint-Action@v1.0.0
        with:
          target: ./flask/Dockerfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
